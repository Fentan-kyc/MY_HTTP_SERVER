@startuml
interface IController {
}
interface IHandler {
    Handle(stream:Stream, method:Request) : void
}
class MyHTTPServerHost <<sealed>> {
    - <<readonly>> _port : int = 80
    + MyHTTPServerHost()
    + MyHTTPServerHost(port:int)
    + MyHTTPServerHost(handler:IHandler, port:int)
    + Start() : void
}
MyHTTPServerHost --> "_handler" IHandler
class Request <<record>> {
    + Path : string
    + Request(path:string, method:HttpMethod)
    + <<override>> ToString() : string
}
Request --> "Method" HttpMethod
class ResponseWriter <<static>> {
    + {static} WriteStatus(code:HttpStatusCode, stream:Stream) : void
}
class ControllersHandler {
    + ControllersHandler(controllersAssembly:Assembly)
    - GetEndpointMethod(controller:Type, method:MethodInfo) : Func<Object>
    - GetPath(controller:Type, method:MethodInfo) : String
    + Handle(networkStream:Stream, request:Request) : void
    - WriteControllerResponce(response:object, networkStream:Stream) : void
}
class "Dictionary`2"<T1,T2> {
}
IHandler <|-- ControllersHandler
ControllersHandler --> "_routes<string,Func<object>>" "Dictionary`2"
class EmptyHandler <<sealed>> {
    + Handle(stream:Stream, request:Request) : void
}
IHandler <|-- EmptyHandler
class StaticFileHandler <<sealed>> {
    - <<readonly>> _path : string
    + StaticFileHandler(path:string)
    + Handle(networkStream:Stream, request:Request) : void
}
IHandler <|-- StaticFileHandler
class RequestParser <<static>> {
    + {static} Parse(buffer:IEnumerable<string>) : Request
    - {static} GetMethod(name:string) : HttpMethod
}
@enduml
